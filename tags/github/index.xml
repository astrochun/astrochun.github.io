<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GitHub | Chun Ly</title>
    <link>https://astrochun.github.io/tags/github/</link>
      <atom:link href="https://astrochun.github.io/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <description>GitHub</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>MIT License</copyright><lastBuildDate>Sat, 26 Dec 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://astrochun.github.io/img/icon-192.png</url>
      <title>GitHub</title>
      <link>https://astrochun.github.io/tags/github/</link>
    </image>
    
    <item>
      <title>Preserving your voting records on Vox Charta with Python</title>
      <link>https://astrochun.github.io/post/voxcharta_preserve/</link>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://astrochun.github.io/post/voxcharta_preserve/</guid>
      <description>&lt;p&gt;It&#39;s been a few months since I have done a tech/hacking post. I figured it might
be worthwhile to do a post-mortem on the recent web scraping work that I did.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://voxcharta.org&#34;&gt;Vox Charta&lt;/a&gt;, a web application that allowed astronomers
to vote and discuss about the latest manuscripts made available on
&lt;a href=&#34;https://arxiv.org&#34;&gt;arXiv&lt;/a&gt;, was conceived in 2009 by
&lt;a href=&#34;https://github.com/guillochon&#34;&gt;James Guillochon&lt;/a&gt;.
It was used by thousands of astronomers internationally as there was no
other options available for several years. Unfortunately, it was
&lt;a href=&#34;https://twitter.com/astrocrash/status/1287053013589385217&#34;&gt;announced&lt;/a&gt;
that the service would be sunsetted on December 31, 2020.&lt;/p&gt;
&lt;p&gt;Personally I used Vox Charta since 2011 and have utilized its voting method to
record astronomy papers of interest to me. When I heard the news of the sunset
I immediately knew that I needed to #preserve my voting records. There were
over 2,000 papers of interest to me!&lt;/p&gt;
&lt;p&gt;So I went forth and built a simple Python software to extract that information.
The &amp;ldquo;My Voting Records&amp;rdquo; content was stored in HTML, so it made sense to use
&lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&#34;&gt;&lt;code&gt;BeautifulSoup&lt;/code&gt;&lt;/a&gt;
for extraction! It was quite fun to solve this problem; this was my first
time building a web scraping tool. Loading the content was pretty straightforward:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re
from bs4 import BeautifulSoup
import json
import pandas as pd

class Extract:
    def __init__(self, filename, json_outfile, csv_outfile):
    
            self.log = log
            self.filename = filename
            self.json_outfile = json_outfile
            self.csv_outfile = csv_outfile
    
            self.content = self.import_data()

    def import_data(self):
        &amp;quot;&amp;quot;&amp;quot;Import data&amp;quot;&amp;quot;&amp;quot;

        with open(self.filename, &#39;r&#39;) as f:
            content = f.read()
        f.close()

        return content

    def soup_it(self):
        &amp;quot;&amp;quot;&amp;quot;Construct BeautifulSoup data structure&amp;quot;&amp;quot;&amp;quot;

        page_content = BeautifulSoup(self.content, &amp;quot;html.parser&amp;quot;)

        return page_content
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because the exported HTML was not as well structured, some trial and error
was needed to figure out how to extract specific content. In the end, I was
able to scrape the arXiv ID, title, author list, author affiliation, abstract,
arXiv categories, links, comments, and many other information. The method
to retrieve the voting records is too long to put it here, but you can see
it &lt;a href=&#34;https://github.com/astrochun/voxcharta-my-voting-record/blob/main/voxcharta_my_voting_record/extract.py#L77-L163&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, I added the ability to export the content to two machine-readable forms.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def export_data(self, records_dict):
        &amp;quot;&amp;quot;&amp;quot;Write JSON and csv files&amp;quot;&amp;quot;&amp;quot;

        with open(self.json_outfile, &#39;w&#39;) as outfile:
            json.dump(records_dict, outfile, indent=4)

        df = pd.DataFrame.from_dict(records_dict, orient=&#39;index&#39;)
        df.to_csv(self.csv_outfile, index=False)

        # Write arxiv_id list
        arxiv_outfile = self.csv_outfile.replace(&#39;.csv&#39;, &#39;_arxiv.txt&#39;)
        clean_df = df.loc[(df[&#39;arxiv_id&#39;] != &#39;&#39;) &amp;amp; (df[&#39;arxiv_id&#39;].notna())]
        clean_df.to_csv(arxiv_outfile, index=False, header=False,
                        columns=[&#39;arxiv_id&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, two types of files are provided: JSON and
CSV. The latter is done with &lt;a href=&#34;https://pandas.pydata.org/&#34;&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/a&gt;.
An example of the exported JSON output is available below.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;voxcharta_json.jpg&#34; &gt;
&lt;img src=&#34;voxcharta_json.jpg&#34; alt=&#34;&#34; width=&#34;100%&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;I then provided my voting records to the maintainers of the
&lt;a href=&#34;https://www.benty-fields.com/&#34;&gt;Benty-Fields&lt;/a&gt; web application. It
has many features that are similar to Vox Charta by allowing for
discussions and voting. In the end, those records were transferred
over!&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;benty_fields.png&#34; &gt;
&lt;img src=&#34;benty_fields.png&#34; alt=&#34;&#34; width=&#34;100%&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;If you&#39;re interested in using this code, it is available
&lt;a href=&#34;https://github.com/astrochun/voxcharta-my-voting-record&#34;&gt;here&lt;/a&gt;.
The code is made available under a
&lt;a href=&#34;https://github.com/astrochun/voxcharta-my-voting-record/blob/main/LICENSE&#34;&gt;GNU GPL-3.0&lt;/a&gt;
License so other astronomers can preserve their precious Vox Charta records.&lt;/p&gt;
&lt;p&gt;The README.md provides more details, but here are some quick
installation and execution steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download the complete webpage view from the &amp;ldquo;My Voting Record&amp;rdquo; page before
the site is permanently down&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the repo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/astrochun/voxcharta-my-voting-record
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build it (preferably in a contained environment)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd voxcharta-my-voting-record
$ (sudo) python setup.py install
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can then easily execute the main script:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vox_run -f myvotingrecords.htm
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Many thanks to James Guillochon for being the selfless maintainer of Vox
Charta for over a decade. I&#39;m also thankful to the Benty-Fields maintainers
for their help.&lt;/p&gt;
&lt;p&gt;If you found this &lt;strong&gt;open-source&lt;/strong&gt; software useful, consider sponsoring me
through GitHub.&lt;/p&gt;
&lt;iframe src=&#34;https://github.com/sponsors/astrochun/button&#34;
title=&#34;Sponsor astrochun&#34; height=&#34;35&#34; width=&#34;116&#34; style=&#34;border: 0;&#34;&gt;
&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Syncing an Overleaf project with your GitHub account</title>
      <link>https://astrochun.github.io/post/overleaf_github_git_sync/</link>
      <pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://astrochun.github.io/post/overleaf_github_git_sync/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.overleaf.com&#34;&gt;Overleaf&lt;/a&gt; is an environment for researchers to
collaboratively write their manuscripts and papers with $\LaTeX$. It is
an amazing tool, but I have found that it has its limitations. For example,
if you edit within their web UI, the changes may show up as separate commits
in their History page.  One of the benefits of Overleaf is that it is
integrated with &lt;code&gt;git&lt;/code&gt;.  This is great as you can maintain version control
and document changes to your collaborators.&lt;/p&gt;
&lt;p&gt;With the power of &lt;code&gt;git&lt;/code&gt;, I wanted to find a way to bring all the version
control to &lt;a href=&#34;https://www.github.com&#34;&gt;GitHub&lt;/a&gt; and their nice UI to illustrate
changes.&lt;/p&gt;
&lt;p&gt;I came across this &lt;a href=&#34;https://ineed.coffee/3454/how-to-synchronize-an-overleaf-latex-paper-with-a-github-repository/&#34;&gt;tutorial&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;The trick is using the default &lt;code&gt;git remote&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Sign up for a free account at &lt;a href=&#34;https://www.overleaf.com&#34;&gt;Overleaf&lt;/a&gt;
and create a new project (I recommend the &amp;ldquo;Example Project&amp;rdquo; option):&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;new_project.png&#34; data-caption=&#34;Step 1: Create a new Overleaf project&#34;&gt;
&lt;img src=&#34;new_project.png&#34; alt=&#34;&#34; width=&#34;100%&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Step 1: Create a new Overleaf project
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Retrieve the &lt;code&gt;git clone&lt;/code&gt; command by selecting the Menu button in the
upper left and the &lt;code&gt;Git&lt;/code&gt; option:&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;git_clone.png&#34; data-caption=&#34;Step 2: Retrieve git clone command&#34;&gt;
&lt;img src=&#34;git_clone.png&#34; alt=&#34;&#34; width=&#34;50%&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Step 2: Retrieve &lt;code&gt;git clone&lt;/code&gt; command
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;You should see a pop-up window containing something similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;               git clone https://git.overleaf.com/&amp;lt;ABCDEF123456&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I use &lt;code&gt;&amp;lt;ABCDEF123456&amp;gt;&lt;/code&gt; as a placeholder for the real path throughout this post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Open up a command-line terminal and execute this &lt;code&gt;git clone&lt;/code&gt; command and
finish it with a more meaningful project name:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://git.overleaf.com/&amp;lt;ABCDEF123456&amp;gt; git_integration_project
$ cd git_integration_project
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You now have a copy of your Overleaf project locally! You can open the content
with your favorite text editor, and &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;, and &lt;code&gt;git push&lt;/code&gt;
new changes to Overleaf.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: To take this one step further and mirror a copy on GitHub,
let&#39;s create an &lt;strong&gt;empty&lt;/strong&gt; &lt;a href=&#34;https://github.com/new&#34;&gt;new GitHub repository&lt;/a&gt;&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;github_new.png&#34; data-caption=&#34;Step 4: Create a new empty GitHub repository&#34;&gt;
&lt;img src=&#34;github_new.png&#34; alt=&#34;&#34; width=&#34;75%&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Step 4: Create a new empty GitHub repository
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Note that this is entirely empty. This is very important as the content
will be populated from your Overleaf repository! Also, I made it a &lt;em&gt;private&lt;/em&gt;
repository. You might find that important as well since you might be
working on a paper that you want to keep private.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Within the &lt;code&gt;git_integration project&lt;/code&gt; folder, create a new &lt;code&gt;git remote&lt;/code&gt;
called &lt;code&gt;github&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote add github https://github.com/&amp;lt;USERNAME&amp;gt;/git_integration_project.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s look at our &lt;code&gt;git remote -v&lt;/code&gt; setup:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote -v
github	https://github.com/&amp;lt;USERNAME&amp;gt;/git_integration_project.git (fetch)
github	https://github.com/&amp;lt;USERNAME&amp;gt;/git_integration_project.git (push)
origin	https://git.overleaf.com/&amp;lt;ABCDEF123456&amp;gt; (fetch)
origin	https://git.overleaf.com/&amp;lt;ABCDEF123456&amp;gt; (push)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: Let us now replicate what we have on Overleaf to GitHub:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push github (master)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you refresh your GitHub repository, you should see all the $\LaTeX$ files.&lt;/p&gt;
&lt;p&gt;Of course, it would be nice to be able to push to both git repositories instead
of having to do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push origin master
$ git push github master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Step 7&lt;/strong&gt;: To do this, let&#39;s create another &lt;code&gt;git remote&lt;/code&gt; called &lt;code&gt;both&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote add both https://git.overleaf.com/&amp;lt;ABCDEF123456&amp;gt;
$ git remote set-url --add --push both https://git.overleaf.com/&amp;lt;ABCDEF123456&amp;gt;
$ git remote set-url --add --push both https://github.com/&amp;lt;USERNAME&amp;gt;/git_integration_project.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let us inspect the &lt;code&gt;git remote -v&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote -v
both	https://git.overleaf.com/&amp;lt;ABCDEF123456&amp;gt; (fetch)
both	https://git.overleaf.com/&amp;lt;ABCDEF123456&amp;gt; (push)
both	https://github.com/&amp;lt;USERNAME&amp;gt;/git_integration_project.git (push)
github	https://github.com/&amp;lt;USERNAME&amp;gt;/git_integration_project.git (fetch)
github	https://github.com/&amp;lt;USERNAME&amp;gt;/git_integration_project.git (push)
origin	https://git.overleaf.com/&amp;lt;ABCDEF123456&amp;gt; (fetch)
origin	https://git.overleaf.com/&amp;lt;ABCDEF123456&amp;gt; (push)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&#39;s it! Now, any &lt;code&gt;git push both (master)&lt;/code&gt; will update both Overleaf and
GitHub.&lt;/p&gt;
&lt;p&gt;Now $\LaTeX$ + &lt;code&gt;git push&lt;/code&gt; on!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
